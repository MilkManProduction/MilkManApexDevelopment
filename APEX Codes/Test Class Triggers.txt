If an account record has related opportunities, the AccountDeletion trigger prevents the record’s deletion

trigger AccountDeletion on Account (before delete) {
   
    // Prevent the deletion of accounts if they have related contacts.
    for (Account a : [SELECT Id FROM Account
                     WHERE Id IN (SELECT AccountId FROM Opportunity) AND
                     Id IN :Trigger.old]) {
        Trigger.oldMap.get(a.Id).addError(
            'Cannot delete account with related opportunities.');
    }
    
}


@isTest
private class TestAccountDeletion {
    @isTest static void TestDeleteAccountWithOneOpportunity() {
        // Test data setup
        // Create an account with an opportunity, and then try to delete it
        Account acct = new Account(Name='Test Account');
        insert acct;
        Opportunity opp = new Opportunity(Name=acct.Name + ' Opportunity',
                                       StageName='Prospecting',
                                       CloseDate=System.today().addMonths(1),
                                       AccountId=acct.Id);
        insert opp;
        
        // Perform test
        Test.startTest();
        Database.DeleteResult result = Database.delete(acct, false);
        Test.stopTest();
        // Verify 
        // In this case the deletion should have been stopped by the trigger,
        // so verify that we got back an error.
        System.assert(!result.isSuccess());
        System.assert(result.getErrors().size() > 0);
        System.assertEquals('Cannot delete account with related opportunities.',
                             result.getErrors()[0].getMessage());
    }
    
}

------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------

'RestrictContactByName' is a trigger which blocks inserts and updates to any contact with a last name of 'INVALIDNAME'.


trigger RestrictContactByName on Contact (before insert, before update) {
	
	//check contacts prior to insert or update for invalid data
	For (Contact c : Trigger.New) {
		if(c.LastName == 'INVALIDNAME') {	//invalidname is invalid
			c.AddError('The Last Name "'+c.LastName+'" is not allowed for DML');
		}

	}



}


@isTest
private class TestRestrictContactByName{
	
    static testMethod void contactInsertSuccess(){
		Boolean insertFailed = false;
		Contact con=new Contact(FirstName='Arjun', LastName='Mahi');
		try{

			insert con;
		}
		catch(Exception e){
			insertFailed = true;
		}
		System.assertEquals(false,insertFailed);
	}
    
    static testMethod void contactInsertFail(){
		Boolean insertFailed = false;
		Contact con=new Contact(FirstName='Arjun', LastName='INVALIDNAME');
		try{
			insert con;
		}
		catch(Exception e){
			insertFailed = true;
		}
		System.assertEquals(true,insertFailed);
	}
}


------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------------